(set-logic QF_BV)
(declare-const x (_ BitVec 2))
(declare-const y (_ BitVec 2))

(assume h1 (cl (= x #b01)))
(assume h2 (cl (= (bvand x y) #b10)))

(step t1 (cl (= x (pbbterm
                    (! ((_ int_of 0) x) :named @x0)
                    (! ((_ int_of 1) x) :named @x1)
        ))) :rule pbblast_pbbvar)

(step t2 (cl (= y (pbbterm
                    (! ((_ int_of 0) y) :named @y0)
                    (! ((_ int_of 1) y) :named @y1)
        ))) :rule pbblast_pbbvar)

(step t3 (cl (= (bvand x y)
                (bvand (pbbterm x0 x1) (pbbterm y0 y1))
        )) :rule cong :premises (t1 t2))

(step t4 (cl (=
            (bvand (pbbterm x0 x1) (pbbterm y0 y1))
            (pbbterm
                    (! (choice ((z Int)) (and (>= (- z x0) 0) (>= (- z y0) 0) (>= (- z (+ x0 y0)) -1))) :named @r0)
                    (! (choice ((z Int)) (and (>= (- z x1) 0) (>= (- z y1) 0) (>= (- z (+ x1 y1)) -1))) :named @r1)
        ))) :rule pbblast_bvand)

(step t5 (cl (=
            (bvand x y)
            (pbbterm r0 r1)
        )) :rule cong :premises (t3 t4))

(step t6 (cl (= #b10 (pbbterm 0 1))) :rule pbblast_pbbconst)

(step t7 (cl (= (= (bvand x y) #b10)
                (= (pbbterm r0 r1) (pbbterm 0 1))
        )) :rule cong :premises (t5 t6))

(step t8 (cl (= (= (pbbterm r0 r1) (pbbterm 0 1))
                (= (- (+ (* 1 r0) (* 2 r1) 0)
                      (+ (* 1 0) (* 2 1) 0))
                0)
        )) :rule pbblast_bveq)

(step t9 (cl (= (= (bvand x y) #b10) 
                (= (- (+ (* 1 r0) (* 2 r1) 0)
                      (+ (* 1 0) (* 2 1) 0))
                0)
        )) :rule trans :premises (t7 t8))


;; Go on with cutting planes...

;; (step t6 (cl) :rule cong :premises (t5 t6))

;; (step t7
;;   (cl
;;     (and
;;       (=
;;         (bvand (pbbT @x0 @x1) (pbbT @y0 @y1))
;;         (pbbT (! (_ intOf @r 0) :named @r0) (! (_ intOf @r 1) :named @r1))
;;         )
;;       (>= (- @x0 @r0) 0)
;;       (>= (- @x1 @r1) 0)
;;       (>= (- @y0 @r0) 0)
;;       (>= (- @y1 @r1) 0)
;;       (>= (- @r0 @x0 @y0) (- 1))
;;       (>= (- @r1 @x1 @y1) (- 1))
;;     )  :rule pbblast_step_bvand))
